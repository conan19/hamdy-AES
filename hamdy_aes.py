import numpy
def rotate(l, n):
	return l[n:] + l[:n]

def plaintext():
	try:
		i=str(input("enter the text you want "))
		real_size=len(i)
		block_size=16
		if(real_size % block_size != 0):
			new_string= i + (16-real_size % 16)*(chr(11))
		else:
			new_string=i
		return str(new_string)
	except:
		print "padding error \'\'"

def inputblock(x,y):
	try:
		b=[]
		v=1
		for i in range(0,y,16):
			b.append(x[i:16*v])
			v=v+1
		return b
	except:
		print "listing text error"
def s_box(x):
	s_box = (0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)
	for n in range(4):
		for m in range(4):
			k=x[m][n]
			x[m][n]=int(s_box[k])
	return x

def state_dipect(x):
	try:
		for n in range(4):
        	        for m in range(4):
                	        k=x[m][n]
                        	x[m][n]=int(ord(k))
		return x
	except:
		print "can't convert string to ascii"
def k_s_box(x):
 try:
        s_box = (0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)
        for n in range(4):
        	k=x[n]
                x[n]=int(s_box[k])
        return x
 except:
	print "key substitute byte error"
def shiftRows(s):
 try:
	a=numpy.roll(s[0],0)
	b=numpy.roll(s[1],-1)
	c=numpy.roll(s[2],-2)
	d=numpy.roll(s[3],-3)
	y=numpy.append([[a],[b]],[[c],[d]]).reshape(4,4)
	return y
 except:
	print "shift rows error"

def times_by_two(x):
 try:
	if(x & 0x80):
		b=(x << 1 ^ 0x1b) & 0xff 
	else:
		b=x << 1
	return b
 except:
	print "error in mix columns Multiplication by 2"

def column_mult(a):
 try:
	c=a[0] ^ a[1] ^ a[2] ^ a[3]
	d=a[0] ^ c ^ times_by_two(a[0]) ^ times_by_two(a[1])
	e=a[1] ^ c ^ times_by_two(a[1]) ^ times_by_two(a[2])
	f=a[2] ^ c ^ times_by_two(a[2]) ^ times_by_two(a[3])
	g=a[3] ^ c ^ times_by_two(a[3]) ^ times_by_two(a[0])
	out_col=numpy.append([[d],[e]],[[f],[g]])
	return out_col
 except:
	print "error in columns multiplication"
def mixColumns(x):
 try:
        a=column_mult(x[:,0])
	b=column_mult(x[:,1])
	c=column_mult(x[:,2])
        d=column_mult(x[:,3])
	output=numpy.append([[a],[b]],[[c],[d]]).reshape(4,4).transpose()
	return output
 except:
	print"error in mix columns"

def inputKey():
 try:
	key=""
	while len(key) != 16 :
		key=input("please enter the 128-bit key: ")
		keylist=list(key)
	keystate=[]
	for i in range(0,len(keylist)):
		keystate.append(ord(keylist[i]))
	x=numpy.array(keystate)
	keystate=x.reshape(4,4)
	return keystate
 except:
	print "invalid key dont forget quotations"

def keyExpansion():
 try:
	r_con = (
    0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
    0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A,
    0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A,
    0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39,
)
	key=inputKey()
	keylist=key.tolist()
	#print keylist
	i=0
	while len(keylist) < 44:
		if i % 4 == 0:
			a=numpy.array(k_s_box(rotate(keylist[i+3],1))) ^ numpy.array(keylist[i]) ^ numpy.array([r_con[(i/4)+1],0,0,0]) 
			keylist.append(a.tolist())
		else:
			a=numpy.array(keylist[i+3]) ^ numpy.array(keylist[i])
			keylist.append(a.tolist())
		i=i+1
	return keylist
 except:
	print "key expansion error"

roundkeys=keyExpansion()

def addRoundKey(x,j):
 try:
	roundkey=numpy.array(roundkeys[4*j:4*(j+1)]).transpose()
	return x ^ roundkey

 except:
	print "add round key error"

def converthex(x):
 try:
	hexa=[]
	for i in range(4):
		for j in range(4):
			a=x[i][j]
			hexa.append(hex(a))
	return hexa
 except:
	print "hex conversion error"

def ciphertext_beautify(x):
	d=''
	y=len(x)
	for i in range(y):
		c=''.join(x[i])
		d=d+c
	return d
	
def encryption():
 try:
	global cipher_dec
	cipher_dec=[]
	cipher=[]	
	plain_text=plaintext()
	ptext_len=len(plain_text)
	c=inputblock(plain_text,ptext_len)
	print c
	for nu in range (0,len(c)):
		t=c[nu]
		l=list(t)
		st=numpy.array(l,dtype='|S4')
		state=st.reshape(4,4).transpose()
		state=state_dipect(state)
		state=state.astype(numpy.int)
		state=addRoundKey(state,0)
		for j in range(1,10):
			state=s_box(state)
			state=shiftRows(state)
			state=mixColumns(state)
			state=addRoundKey(state,j)
		state=s_box(state)
                state=shiftRows(state)
                state=addRoundKey(state,10)
		out=state.transpose().tolist()
		output=converthex(out)
		cipher_dec.append(out)
		cipher.append(output)
	cipher_text=ciphertext_beautify(cipher)
	return cipher_text
 except:
	print "encryption error"

def inv_shift_rows(s):
 try:
	a=numpy.roll(s[0],0)
        b=numpy.roll(s[1],1)
        c=numpy.roll(s[2],2)
        d=numpy.roll(s[3],3)
        y=numpy.append([[a],[b]],[[c],[d]]).reshape(4,4)
        return y
 except:
	print "inverse of shift rows error"

def inv_mult_col(a):
 try:
        c=times_by_two(times_by_two(a[0] ^ a[2]))
	d=times_by_two(times_by_two(a[1] ^ a[3]))
        e=a[0] ^ c
        f=a[1] ^ d
        g=a[2] ^ c
	h=a[3] ^ d
        out_col=numpy.append([[e],[f]],[[g],[h]])
        return out_col
 except:
	print "inverse multiplication error"

def inv_mix_columns(x):
 try:
	a=inv_mult_col(x[:,0])
	b=inv_mult_col(x[:,1])
        c=inv_mult_col(x[:,2])
        d=inv_mult_col(x[:,3])
	output=numpy.append([[a],[b]],[[c],[d]]).reshape(4,4).transpose()
	output=mixColumns(output)
        return output
 except:
	print "inverse mix columns error"

def inv_s_box(x):
 try:
	inv_s_box = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)
	for n in range(4):
                for m in range(4):
                        k=x[m][n]
                        x[m][n]=int(inv_s_box[k])
        return x	
 except:
	print "inverse s_box error"

def hex_prep(a):
 try:
	x=[]
	y=[]
	d=a.split('0x')
	for i in range(1,len(d)):
		x.append('0x'+d[i])
	for j in range(0,len(x),16):
		y.append(x[j:16+j])
	return y
 except:
	print "unable to prepare cipher text to be decrypted"
def cipher_2_decimal(c):
 try:
	v=[]
	for i in range(len(c)):
		v.append(int(c[i],16))
	return v
 except:
	print "unable to convert hex to decimal"

def text_beautify(x):
        d=''
        y=len(x)
        for i in range(y):
                c=''.join(x[i])
                d=d+c
        return d

def flatten(l):
    try:
        return flatten(l[0]) + (flatten(l[1:]) if len(l) > 1 else []) if type(l) is list else [l]
    except IndexError:
        return []

def decryption():
 try:
	all_text=[]
	cipher=input("hex to decrypt: ")
	ciphert=hex_prep(cipher)
	for nu in range(len(ciphert)):
		cipher_in_hex=ciphert[nu]
		cipher_in_dec=cipher_2_decimal(cipher_in_hex)
		cipher_state=numpy.array(cipher_in_dec).reshape(4,4).transpose()
		state=addRoundKey(cipher_state,10)
		state=inv_shift_rows(state)
		state=inv_s_box(state)
		for i in range(9,0,-1):
			state=addRoundKey(state,i)
			state=inv_mix_columns(state)
			state=inv_shift_rows(state)
			state=inv_s_box(state)
		state=addRoundKey(state,0)
		lis=state.transpose().tolist()
		all_text.append(lis)
		t=flatten(all_text)
	return t
 except:
	print "decryption error"
def enhance(x):
 try:
	text=[]
	for n in range(len(x)):
		text.append(chr(x[n]))
	return text
 except:
	print "enhance function error"
def mainFun():
 try:
	print "\n \n hi ^_^ i'm hamdy & this is my AES encryption,decryption algorithm \n for encryption press 1 \n for decryption press 2 \n \n"
	i=input("your choice: ")
	if i == 2:
		output=decryption()
		text=enhance(output)
		te=''.join(text)
		plain_text=te.replace(chr(11),'')
		print "plain text is: " , plain_text
	if i==1:
		output=encryption()
		print "the cipher text in hexa is: ", output
		#print "the cipher text in decimal is: ",cipher_dec
 except:
	print "invalid input"

mainFun()
